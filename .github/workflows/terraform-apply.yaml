name: Terraform
on: 
  workflow_call:
    inputs:
      env:
        description: 'stokenet | mainnet'
        default: stokenet
        required: false
        type: string
      ref:
        description: Git Ref (Default to workflow branch)
        required: false
        type: string
      terraform_version:
        type: string
        required: false
        default: "1.7.2"
        description: Terraform version to use
    secrets:
      GH_INFRA_PAT:
        required: true
      HCLOUD_TOKEN:
        required: true
      AWS_ACCESS_KEY:
        required: true
      AWS_SECRET_KEY:
        required: true

# Jobs to be executed in the workflow
jobs:
  # Plan for TF Files
  plan:
    name: "Plan (${{ inputs.env }})"
    runs-on: ubuntu-latest
    environment: ${{ inputs.env }}
    defaults:
      run:
        working-directory: ./infra/terraform
    env:
      HCLOUD_TOKEN : ${{ secrets.HCLOUD_TOKEN }}
      GITHUB_TOKEN: ${{ secrets.GH_INFRA_PAT }}
    strategy:
      fail-fast: false
    steps:
      # Checkout Project
      - name: Checkout Project
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.ref || github.ref }}

      # Configure AWS Credentials
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: eu-central-1
      
      # Install Terrafrom
      - name: Terraform install
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.terraform_version }}
      
      # Initialize Terraform workspace
      - name: Terraform init
        run: make ENV=${{ inputs.env }} terraform/init
      
      # Generate Terraform execution plan and save it to terraform.plan file
      - name: Terraform plan
        run: make ENV=${{ inputs.env }} TF_CMD_ARGS='-out=./terraform.plan' terraform/plan 
        env:
          GITHUB_TOKEN: ${{ secrets.GH_INFRA_PAT }}
    
      - name: Save terraform plan
        uses: actions/upload-artifact@v4
        with:
          name: terraform.plan
          path: ./infra/terraform/terraform.plan
          if-no-files-found: error 

  # Apply for TF Files
  apply:
    needs: [plan]
    name: "Apply (${{ inputs.env }})"
    runs-on: ubuntu-latest
    environment: ${{ inputs.env }}
    defaults:
      run:
        working-directory: ./infra/terraform
    env:
      HCLOUD_TOKEN : ${{ secrets.HCLOUD_TOKEN }}
    strategy:
      fail-fast: false
    steps:
      # Checkout Project
      - name: Checkout Project
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.ref || github.ref }}
      
      # Configure AWS Credentials
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: eu-central-1


      # Download the terraform plan artifact
      - name: Download terraform plan
        uses: actions/download-artifact@v4
        with:
          name: terraform.plan
          path: ${{ github.workspace }}/infra/terraform
    
    # Add a verification step to ensure the plan was downloaded
      - name: Verify plan file
        run: |
          ls -la
          if [ ! -f terraform.plan ]; then
            echo "Error: terraform.plan file not found!"
            exit 1
          fi
        working-directory: ./infra/terraform
      
      # Install Terraform
      - name: Terraform install
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.terraform_version }}
      
      # Initialize Terraform workspace
      - name: Terraform init
        run: make ENV=${{ inputs.env }} terraform/init
        
      # Apply Terraform changes using the saved execution plan
      - name: Terraform Apply
        run: make ENV=${{ inputs.env }} TF_CMD_ARGS='-auto-approve terraform.plan' terraform/apply
        env:
          GITHUB_TOKEN: ${{ secrets.GH_INFRA_PAT }}
